#!/usr/bin/env node

var log = console.log;
var debug = require('debug')('benchmark:nb');
var parseArgs = require('minimist');
var argv = parseArgs(process.argv.slice(2));
if(!isValidArgs(argv)) return help();
var nb = require('../')(argv);

nb.on('all connected', handleAllConnected);
nb.on('exit', handleExit);
nb.on('error', function(err){
  debug('********** %j', err);
  process.exit(1);
});

// hook `Ctrl + C`
process.on('SIGINT', handleQuit);

// start benchmarkding
nb.run();


// internal handle funcs

function handleAllConnected(nClients){
  debug('all clients: %s connected, ready to emit!', nClients);
}

function handleExit(){
  debug('Quit node benchmark process!');
  process.exit(0);
}

function handleQuit() {
  debug("Stoping workers elegantly...");

  nb.stop();
}

function isValidArgs(args){
  debug('[args] %j', args);
  if(!args.n || !args.c || !args.ioc || !args._) return false;
  return true;
}

function help(){
  log([
       '\x1b[1;33m' + 
       'Usage:' + 
       '\x1b[m',
       '\x1b[0;32m' + 
       '    -n     <number>   total request number to be sent',
       '    -c     <number>   concurrency number, the same workers number',
       '    --ioc  <number>   clients number in per worker',
       '    -t     <number>   interval time for emitting(ms) in per worker',
       '    [ws://]hostname[:port]/path' + 
       '\x1b[m',
       '',
       '\x1b[1;33m' +        
       'e.g:' + 
       '\x1b[m',
       '\x1b[0;32m' + 
       '   DEBUG=benchmark:* ./bin/nb -n 1000 -c 10 --ioc 10 -t 2000 ws://localhost:3000' + 
       '\x1b[m'].join('\n'));
}
